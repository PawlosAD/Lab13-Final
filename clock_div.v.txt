//Implements a modifiable clock divider with a chain of D flip flops
// Divides input clock frequency by 2^DIVIDE_BY and effectively creates a slower clock signal
module clock_div #(
    parameter DIVIDE_BY = 17
)(
    input wire reset,//Active high asynchronous reset input
    input wire clock, // Input clock signal
    output wire clk_out // Output clock signal thats divided by 2^DIVIDE_BY
);
    wire [DIVIDE_BY-1:0] q; // Q outputs from flip flops
    wire [DIVIDE_BY-1:0] notq; // Complement NotQ outputs from flip flops

    dff ff0 (
        .reset(reset), // Reset line shared by all flip flops
        .clock(clock), // First flip flop clocked by main clock
        .D(notq[0]), // Input D toggles each cycle(Q-> !Q)
        .Q(q[0]), // Output Q[0]
        .NotQ(notq[0])); // Output NotQ[0]

    // Generate block to instantiate remaining flip flops in chain
    genvar i;
    generate
        for (i = 1; i < DIVIDE_BY; i = i + 1) begin : dff_chain
            // Each subsequent flip flop clocked by Q output of previous one
            // Causes each flip flop to toggle at half the frequency of the previous
            dff ff (
                .reset(reset), // Common reset signal
                .clock(q[i-1]), // Clock input from previous flip flops Q
                .D(notq[i]), // D input from current flip flops NotQ
                .Q(q[i]), // Q output for current stage
                .NotQ(notq[i]) // NotQ output for current stage
            );
        end
    endgenerate
    // Final clock output is taken from last flip flop in chain
    // Provides divided clock signal at a much lower frequency
    assign clk_out = q[DIVIDE_BY-1];
endmodule
